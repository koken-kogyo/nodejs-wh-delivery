<!-- es-index.ejs -->
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>物流出荷指示書</title>
    <link rel="stylesheet" href="/static/css/style-basic.css">
    <link rel="stylesheet" href="/static/css/style-delivery.css">
    <link href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" rel="stylesheet">
    <!-- レスポンシブwebデザインの指定 --><!-- デバイスの横幅合わせ,等倍表示（半角空白入れるな！） -->
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <!-- Common JavaScript -->
    <script src="/static/javascripts/_myfunctions.js"></script>
</head>
<body>
    <!-- Common JavaScript EJS -->
    <%- include("_myfunctions.ejs") %>

    <!-- Header -->
    <%- include("_header.ejs", { title: "出荷指示書" + myFunc.c(shipdt), req }) %>

    <!-- Groups -->
    <div id="navigate">
    <div id="groups" class="containers">
    <% if (locals.err) { %>
        
    <% } else { %>
        <div id="menu">

            <% let osType = myRequestHeader.osType(req); %>

            <!-- 前日ボタン -->
            <% let idxY = pages.findIndex((dt) => { return dt === shipdt+":"+xlssn+":" }); %>
            <% if (idxY===0) { %>
                <div class="menu-img"><i class="fas fa-step-backward noallow"></i></div>
            <% } else { %>
                <div class="menu-img"><a href="javascript:prevpage()"><i class="fas fa-step-backward allow"></i></a></div>
                <input type="hidden" id="prevpage" name="prevpage" value="<%= pages[idxY-1] %>">
            <% }; %>

            <!-- ホーム ボタン -->
            <div class="menu-img"><a href="/wh"><i class="fas fa-home home"></i></a></div>

            <!-- 得意先 -->
            <div class="menu-item">得意先：<br><div class="menu-data"><%= tkrnm %>(<%= tkcd %>)</div></div>

            <!-- 受注納期 -->
            <div class="menu-item">受注納期：<br><div class="menu-data"><%= kd8330[0].DLVRDT %></div></div>

            <!-- 出荷点数 -->
            <div class="menu-item">出荷準備完了：<br><div class="menu-data"><%= cnt %> / <%= ttl %>点</div></div>

            <!-- 機能切り替え -->
            <div class="menu-item">全て表示：
                <div class="button r" id="button-1">
                    <input type="checkbox" class="checkbox" id="checkDisp" onchange="checkDispChange()" />
                    <div class="knobs"></div>
                    <div class="layer"></div>
                </div>
            </div>

            <!-- 後日ボタン -->
            <% let idxT = pages.findIndex((dt) => { return dt == shipdt+":"+xlssn+":" }); %>
            <% if (idxT===(pages.length-1)) { %>
                <div class="menu-img"><i class="fas fa-step-forward noallow"></i></div>
            <% } else { %>
                <div class="menu-img"><a href="javascript:nextpage()"><i class="fas fa-step-forward allow"></i></a></div>
                <input type="hidden" id="nextpage" name="nextpage" value="<%= pages[idxT+1] %>">
            <% }; %>

        </div>
        <!-- URLパラメータを保存 -->
        <input type="hidden" id="tkcd" name="tkcd" value="<%= tkcd %>">
        <input type="hidden" id="shipdt" name="shipdt" value="<%= shipdt %>">
        <input type="hidden" id="xlssn" name="xlssn" value="<%= xlssn %>">
        <input type="hidden" id="disp" name="disp" value="<%= disp %>">
        <% }; %>
    </div>
    <hr>
    </div>

    <!-- Popup Window -->
    <div id="popWin">
        <div class="pop-win">
            <div class="modal-body">
                <table id="popTitle">
                    <tr>
                        <th width="38px" class="left indent">品番</th>
                        <th width="300px" class="left indent" id="popHMCD">-</th>
                        <th id="popCOMM">-</th>
                        <th width="30px" class="center">予</th>
                        <th width="38px" class="center" id="popSV">10</th>
                    </tr>
                </table>
                <table id="popTable">
                <tr>
                    <th rowspan="2" width="40px">順序</th>
                    <th width="220px" colspan="2" class="left indent">工程</th>
                    <th width="220px" colspan="2" class="left indent">手配先</th>
                    <th width="70px" colspan="2">実績</th>
                </tr>
                <tr>
                    <th colspan="2" class="left indent">作業内容</th>
                    <th colspan="2" class="left indent">作業注釈</th>
                    <th colspan="2" class="red">在庫数</th>
                </tr>
                </table>
            </div>
            <button id="popClose">閉じる</button>
        </div>
    </div>


    <!-- Details -->
    <div id="top"></div>

    <div id="details">
    <div id="details-index">
    <% if (locals.err) { %>
        <ul class="alert">
            <li><%= err %></li>
        </ul>
    <% } else { %>

    <% if (kd8330.length == 0) { %>
        <div class="alert">出荷指示書データが存在しません．</div>
    <% } else { %>
        <table id="tbl1">
            <tr>
                <th rowspan="2" width="10px" >No</th>
                <th rowspan="2" width="50px" >ﾛｹｰｼｮﾝ</th>
                <th rowspan="2" width="150px" class="lef">　得意先品番</th>
                <th rowspan="2" width="50px" >納入先</th>
                <th rowspan="2" width="5px"  >ｶ</th>
                <th rowspan="2" width="50px" >指示数</th>
                <th rowspan="2" width="10px" >前</th>
                <th rowspan="2" width="10px" >当</th>
                <th rowspan="2" width="20px" >検区</th>
                <th rowspan="2" width="50px" >容器名</th>
                <th rowspan="2" width="50px" >収容数</th>
                <th rowspan="2" width="50px" class="th-small">紐色<br>数量</th>
                <th rowspan="2" width="120px">社内品番</th>
                <th rowspan="2" width="70px" class="th-small">前々工程</th>
                <th rowspan="2" width="70px" >前工程</th>
                <th rowspan="2" width="40px" class="red">実績</th>
                <th colspan="3" class="th-small">ハンディ情報</th>
            </tr>
            <tr>
                <th width="50px" class="th-small">担当者</th>
                <th width="50px" class="th-small">照合時</th>
                <th width="50px" class="th-small">準備数</th>
            </tr>
            <% kd8330.forEach(function (d) { %>
                <% if (d.ODRQTY==d.HTJUQTY && d.HTJUQTY != 0) { %>
            <tr style="display: none">
                <% } else { %>
            <tr>
                <% }; %>
                <td ondblclick=<%- `"detailCancel(${d.AUTONO})"` %>><%= d.NO %></td>
                <td class="td-small"><%= d.SKBUCD %></td>
                <td class="td-big lef">　<%= d.TKHMCD %></td>
                <td class="td-small"><%= d.NNCD %></td>
                <td class="td-small"><%= d.BOXNUM %></td>
                <td class="td-small w800" ondblclick=<%- `"detailShiped(${d.AUTONO})"` %>>
                    <%= d.ODRQTY==0 ? "" : d.ODRQTY %>
                </td>
                <td class="td-small"><%= d.YESTERDAY %></td>
                <td class="td-small"><%= d.TODAY %></td>
                <td class="td-small"><%= d.QCKBN %></td>
                <td class="td-small"><%= d.SKBOXCD %></td>
                <td class="td-small"><%= d.INSUU==0 ? "" : d.INSUU %></td>
                <td class="td-small"><%= d.SKHIASU %></td>
                <td class="td-small"><%= d.HMCD %></td>
                <td class="td-small"><%= d.YPODRNM %></td>
                <td class="td-small td-a"><%= d.ODRNM %></td>
                <% if  ( d.PLNQTY-d.ZAIQTY>0 ) { %>
                    <% if  ( d.PLNQTY-d.ZAIQTY <= d.JIQTY ) { %>
                        <td class="td-big s4 w800"><%= d.PLNQTY - d.ZAIQTY %><br><%= myFunc.aa(d.JIDT) %></td>
                    <% } else { %>
                        <td class="td-big sY"><%= d.PLNQTY - d.ZAIQTY %><%= d.JIQTY==0 ? '' : '('+d.JIQTY+')' %></td>
                    <% }; %>
                <% } else { %>
                    <td class="td-small"></td>
                <% }; %>
                
                <td class="td-large-small"><%= d.HTJUQTY==0 ? "-" : d.HTTANNM %></td>
                <td class="td-small"><%- d.HTJUQTY==0 ? "-" : myFunc.ab(d.HTJUDT) %></td>
                <% if (d.ODRQTY==d.HTJUQTY && d.HTJUQTY != 0) { %>
                    <td class="td-small s4 w800"><%= d.HTJUQTY==0 ? "-" : d.HTJUQTY %></td>
                <% } else { %>
                    <td class="td-small"><%= d.HTJUQTY==0 ? "-" : d.HTJUQTY %></td>
                <% }; %>
                <td style="display: none;"><%= d.AUTONO %></td>
                <td style="display: none;"><%= d.SHIPSTS %></td>
            </tr>
            <% }); %>
        </table>
        <br><br>
    <% }; %>

    <% }; %>
    </div>
    </div>

    <div id="scroll-bottom"></div>

    <!-- Footer -->
    <%- include("_footer.ejs", req) %>

    <!-- ブラウザ読み込み完了後のJavaScriptを記述 -->
    <script>
        
        // 起動直後に実行させる処理
        colorDuplicationInspect();
        
        // １．重複品番色付け、２．検区色付け、３．当日以外のYGW列非表示
        function colorDuplicationInspect() {
            //alert(tbl1.rows.length);
            const shipdt = document.getElementById("shipdt").value;
            const disp = document.getElementById("disp").value;
            // 当日以外の場合は、YGW列を非表示にする(1)(table.th)
            const d = new Date();
            const today = d.getFullYear() + "-" + ("0" + (d.getMonth() + 1)).slice(-2) + "-" + ("0" + (d.getDate())).slice(-2);
            // const today = "2024-09-16";
            if (shipdt != today) {
                tbl1.rows[0].cells[13].style.display = "none";
                tbl1.rows[0].cells[15].style.display = "none";
                document.getElementById("details").style.width = "980px";
            }
            // テーブルの数分ループ処理
            const row = tbl1.rows.length;
            for( var i = 2; i < row; i++ ){
                // 品番重複行は色付け
                if (i < row-2 && tbl1.rows[i].cells[2].innerHTML == tbl1.rows[i + 1].cells[2].innerHTML) {
                    tbl1.rows[i    ].cells[2].classList.add("sD");
                    tbl1.rows[i + 1].cells[2].classList.add("sD");
                }
                // 検区RFH始まり
                let tmp = tbl1.rows[i].cells[8].innerHTML;
                if (tmp.substring(0, 1) == "R" || tmp.substring(0, 1) == "F" || tmp.substring(0, 1) == "H") {
                    tbl1.rows[i].cells[8].classList.add("sI");
                }
                // 当日以外の場合は、YGW列を非表示にする(2)(table.tr)
                if (shipdt != today) {
                    tbl1.rows[i].cells[13].style.display = "none";
                    tbl1.rows[i].cells[15].style.display = "none";
                }
                // 出荷準備完了した行は非表示にする
                // 強制完了した行も非表示にする
                if (tbl1.rows[i].cells[5].innerHTML.trim() == tbl1.rows[i].cells[18].innerHTML.trim() ||
                    tbl1.rows[i].cells[20].innerHTML == "4" ||
                    tbl1.rows[i].cells[20].innerHTML == "5") {
                    tbl1.rows[i].style.display = "none";
                }
                // 強制出荷準備完了行に色をつける
                if (tbl1.rows[i].cells[20].innerHTML == "5") {
                    tbl1.rows[i].className = "s5";
                }
                // 出荷取消行に色をつける
                if (tbl1.rows[i].cells[20].innerHTML == "9") {
                    tbl1.rows[i].className = "s9";
                }
            }
        }
        // 全件表示／残数表示の切り替え
        function checkDispChange() {
            const checkDisp = document.getElementById("checkDisp");
            const row = tbl1.rows.length;
            for( var i = 2; i <= row; i++ ){
                if (checkDisp.checked == false) {
                    if (tbl1.rows[i].cells[5].innerHTML.trim() == tbl1.rows[i].cells[18].innerHTML.trim() ||
                        tbl1.rows[i].cells[20].innerHTML == "4" ||
                        tbl1.rows[i].cells[20].innerHTML == "5") {
                        tbl1.rows[i].style.display = "none";
                    }
                } else {
                    tbl1.rows[i].style.display = "";
                }
            }
        }
        // 前ページ遷移
        function prevpage(){
            const prevpage = document.getElementById("prevpage").value;
            const tkcd =  document.getElementById("tkcd").value;
            const shipdt = prevpage.split(":")[0];
            const xlssn = prevpage.split(":")[1];
            const disp = document.getElementById("disp").value;
            location.href = `/wh/delivery/${tkcd}/${shipdt}/${xlssn}/${disp}`;
        }
        // 次ページ遷移
        function nextpage(){
            const nextpage = document.getElementById("nextpage").value;
            const tkcd =  document.getElementById("tkcd").value;
            const shipdt = nextpage.split(":")[0];
            const xlssn = nextpage.split(":")[1];
            const disp = document.getElementById("disp").value;
            location.href = `/wh/delivery/${tkcd}/${shipdt}/${xlssn}/${disp}`;
        }
        function scriptTest(){
            var userAgent = window.navigator.userAgent.toLowerCase(); 
            alert(userAgent);
        }
        // i-Reporter の起動
        async function iReporter(){
            location.href = "jp.co.cimtops.ireporter://open";
        }

        window.addEventListener('load', function () {
            let column_no = 0; //今回クリックされた列番号
            let column_no_prev = 0; //前回クリックされた列番号
            document.querySelectorAll('#tbl1 th').forEach(elm => {
                elm.onclick = function () {
                    //alert(this); HTMLTableCellElement
                    column_no = this.cellIndex; //クリックされた列番号
                    let table = this.parentNode.parentNode.parentNode;
                    let sortType = 0; //0:数値 1:文字
                    let sortArray = new Array; //クリックした列のデータを全て格納する配列
                    for (let r = 2; r < table.rows.length; r++) {
                        //行番号と値を配列に格納
                        let column = new Object;
                        column.row = table.rows[r];
                        column.value = table.rows[r].cells[column_no].textContent;
                        sortArray.push(column);
                        //数値判定
                        if (isNaN(Number(column.value))) {
                            sortType = 1; //値が数値変換できなかった場合は文字列ソート
                        }
                    }
                    if (sortType == 0) { //数値ソート
                        if (column_no_prev == column_no) { //同じ列が2回クリックされた場合は降順ソート
                            sortArray.sort(compareNumberDesc);
                        } else {
                            sortArray.sort(compareNumber);
                        }
                    } else { //文字列ソート
                        if (column_no_prev == column_no) { //同じ列が2回クリックされた場合は降順ソート
                            sortArray.sort(compareStringDesc);
                        } else {
                            sortArray.sort(compareString);
                        }
                    }
                    //ソート後のTRオブジェクトを順番にtbodyへ追加（移動）
                    let tbody = this.parentNode.parentNode;
                    for (let i = 0; i < sortArray.length; i++) {
                        tbody.appendChild(sortArray[i].row);
                    }
                    //昇順／降順ソート切り替えのために列番号を保存
                    if (column_no_prev == column_no) {
                        column_no_prev = -1; //降順ソート
                    } else {
                        column_no_prev = column_no;
                    }
                };
            });
            // 前工程クリックイベントハンドラー
            document.querySelectorAll('#details-index .td-a').forEach(elm => {
                elm.onclick = function () {
                    if (this instanceof HTMLTableCellElement) {
                        const column = this.cellIndex;
                        const tr = this.parentNode;
                        const row = tr.sectionRowIndex;
                        const tkhmcd = tbl1.rows[row].cells[2].innerText.trim();
                        const hmcd = tbl1.rows[row].cells[12].innerText.trim();
                        const han = /^[\p{scx=Han}]+$/u; // 漢字の場合:true:「張紙」等の漢字が社内品番列に入っている為
                        // alert(hmcd + ":" + han.test(hmcd));
                        // alert(`行row=${ row } 列column=${ column }`);

                        // 品目手順ポップアップ表示
                        popWin(hmcd=="" || han.test(hmcd) ? tkhmcd : hmcd);

                    }
                }
            });
        });
        //数値ソート（昇順）
        function compareNumber(a, b)
        {
            return a.value - b.value;
        }
        //数値ソート（降順）
        function compareNumberDesc(a, b)
        {
            return b.value - a.value;
        }
        //文字列ソート（昇順）
        function compareString(a, b) {
            if (a.value < b.value) {
                return -1;
            } else {
                return 1;
            }
            return 0;
        }
        //文字列ソート（降順）
        function compareStringDesc(a, b) {
            if (a.value > b.value) {
                return -1;
            } else {
                return 1;
            }
            return 0;
        }

        // 品目手順ポップアップ表示
        function popWin(hmcd) {
            
            // (1) 品目手順取得API
            fetch(`/wh/m0510zai/${hmcd}`)
            .then(response => response.json())
            .then(data => {
                // (2) ポップアップ画面を表示
                const popWin = document.getElementById("popWin");
                popWin.style.display = "flex";
                document.getElementById("popHMCD").innerText = hmcd + "【" + data[0].HMNM + "】";
                document.getElementById("popCOMM").innerText = data[0].WKNOTE;
                document.getElementById("popSV").innerText = data[0].SVQTY;

                // (3) 今表示されているテーブルのヘッダー以外を全削除
                let table = document.getElementById("popTable");
                do {
                    if (table.rows.length > 2) {table.deleteRow(-1);}
                } while (table.rows.length > 2);
                // (4) APIで取得したデータをテーブ行に追加
                let rowCnt = 0;
                data.forEach(function (d) {
                    if (d.KTCD != "WH00" && rowCnt < 5) {
                        let newRow1 = table.insertRow();
                        appendTD(newRow1, d.KTSEQ, "center", "2", "");
                        appendTD(newRow1, d.KTCD, "indent", "", "");
                        appendTD(newRow1, d.KTNM, "indent", "", "");
                        appendTD(newRow1, d.ODCD, "indent", "", "");
                        appendTD(newRow1, d.ODRNM, "indent", "", "");
                        appendTD(newRow1, (d.JIKBN=="1") ? "有" : "-", "center", "", "2");

                        let newRow2 = table.insertRow();
                        appendTD(newRow2, (d.WKNOTE==null) ? "" : d.WKNOTE, "indent", "", "2");
                        appendTD(newRow2, (d.WKCOMMENT==null) ? "" : d.WKCOMMENT, "indent", "", "2");
                        if (d.ZAIQTY==0) {
                            appendTD(newRow2, "-", "center", "", "2");
                        } else {
                            appendTD(newRow2, d.ZAIQTY, "center red", "", "");
                            newCell = newRow2.insertCell(-1);
                            newCell.innerHTML= '<font size="2rem">' + d.UPDTDT.replace("(","<br>(") + '</font>';
                            newCell.className = "center red";
                        }
                        newRow2.classList.add("tr3rem");
                        rowCnt++;
                    }
                });
                // (5) ポップアップ閉じるイベントハンドラー
                const popClose = document.getElementById("popClose");
                popClose.addEventListener("click", () => {
                    popWin.style.display = "none";
                });
                popClose.focus();
            });
            
        }
        function appendTD(newrow, str, name, rowspan, colspan){
            let newCell = newrow.insertCell();
            let newText = document.createTextNode(str);
            newCell.appendChild(newText);
            if (rowspan != "") newCell.setAttribute("rowspan", rowspan);
            if (colspan != "") newCell.setAttribute("colspan", colspan);
            if (name != "") newCell.className = name;
        }

        // 明細の取り消し処理
        function detailCancel(autono){
            let rowno = 0;
            let shipsts = "";
            // (1) ステータス判定
            for( var i = 2; i < tbl1.rows.length; i++ ){
                if (tbl1.rows[i].cells[19].innerHTML == autono) {
                    if (window.getSelection) window.getSelection().removeAllRanges(); // まずフォーカスを外す
                    shipsts = tbl1.rows[i].cells[20].innerHTML; // 現在の出荷準備状態
                    if (shipsts == "4" || shipsts == "5") {
                        alert("出荷準備完了のため取消できません．\nシステム担当者に連絡してください．");
                        return;
                    };
                    let msg = "得意先品番：" + tbl1.rows[i].cells[2].innerHTML + "\n" + 
                        "指示数：" + tbl1.rows[i].cells[5].innerHTML.trim();
                    let que = (shipsts == "9") ? "元に戻しますか？" : "出荷取消しますか？";
                    if (window.confirm(que + "\n\n" + msg) == false) return;
                    rowno = i;
                    break;
                }
            }
            // (2) Newステータスをセット
            const newsts = shipsts == "9" ? "1" : "9";
            // (3) ステータス変更処理API依頼
            fetch(`/wh/status/${autono}/${newsts}`)
            .then(res => {if(!res.ok) {throw new Error(`${res.status} ${res.statusText}`);}})
            .then(data => {
                // (4) DOM更新
                tbl1.rows[rowno].className = (newsts == "9") ? "s9" : "";
                tbl1.rows[rowno].cells[20].innerHTML = (newsts == "9") ? "9" : "1";
            })
            .catch(err => {alert(err);});
        }

        // 明細の出荷準備強制完了処理
        function detailShiped(autono){
            let rowno = 0;
            let shipsts = "";
            // (1) ステータス判定
            for( var i = 2; i < tbl1.rows.length; i++ ){
                if (tbl1.rows[i].cells[19].innerHTML == autono) {
                    if (window.getSelection) window.getSelection().removeAllRanges(); // まずフォーカスを外す
                    shipsts = tbl1.rows[i].cells[20].innerHTML; // 現在の出荷準備状態
                    if (shipsts == "9") {
                        alert("出荷取消のため強制完了できません．\nシステム担当者に連絡してください．");
                        return;
                    };
                    let msg = "得意先品番：" + tbl1.rows[i].cells[2].innerHTML + "\n" + 
                        "指示数：" + tbl1.rows[i].cells[5].innerHTML.trim();
                    let que = (shipsts == "5") ? "元に戻しますか？" : "出荷準備完了にしますか？";
                    if (window.confirm(que + "\n\n" + msg) == false) return;
                    rowno = i;
                    break;
                }
            }
            // (2) Newステータスをセット
            const newsts = shipsts == "5" ? "1" : "5";
            // (3) ステータス変更処理API依頼
            fetch(`/wh/status/${autono}/${newsts}`)
            .then(res => {if(!res.ok) {throw new Error(`${res.status} ${res.statusText}`);}})
            .then(data => {
                // (4) DOM更新
                tbl1.rows[rowno].className = (newsts == "5") ? "s5" : "";
                if (document.getElementById("checkDisp").checked == false && newsts == "5") {
                    tbl1.rows[rowno].style.display = "none";
                } else {
                    tbl1.rows[rowno].style.display = "";
                }
                tbl1.rows[rowno].cells[20].innerHTML = (newsts == "5") ? "5" : "1";
            })
            .catch(err => {alert(err);});
        }

</script>

</body>
</html>
